<?php

namespace MC\MessagesBundle\Repository;

use MC\UserBundle\Entity\User;
/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUnreadMessagesQB(User $user){
        $qb = $this
        ->createQueryBuilder('messages')
        ->andWhere('messages.draft != true')
        ->orderBy('messages.creationDate', 'DESC')
        ;
        //TEST RECIPIENTS
        $qb
        ->andWhere(':user MEMBER OF messages.recipients')
            ->setParameter('user', $user)
        //TEST READERS
            ->andWhere(':user NOT MEMBER OF messages.readers')
            ->setParameter('user', $user)
        ;
        return $qb;
    }

    public function getUnreadMessages(User $user){
        $qb = $this->getUnreadMessagesQB($user);
        return $qb->getQuery()->getResult();
    }

    public function countUnreadMessages(User $user){
        $qb = $this->getUnreadMessagesQB($user);
        $qb->select('COUNT(messages)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getSentMessagesQB(User $user, $max = null){
        $qb = $this->createQueryBuilder('messages')
        ->andWhere('messages.author = :author')
            ->setParameter('author', $user)
        ->andWhere('messages.draft = :draft')
            ->setParameter('draft', false)
        ->orderBy('messages.creationDate', 'DESC');
        if($max){
            $qb
            ->setMaxResults($max);
        }

        return $qb;
    }

    public function getSentMessages(User $user, $max = null){
        $qb = $this->getSentMessagesQB($user, $max);
        return $qb->getQuery()->getResult();
    }

    public function countSentMessages(User $user){
        $qb = $this->getSentMessagesQB($user);
        $qb->select('COUNT(messages)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getDraftMessagesQB(User $user, $max = null){
        $qb = $this->createQueryBuilder('messages');
        $qb
        ->andWhere('messages.author = :user')
            ->setParameter('user', $user)
        ->andWhere('messages.draft = :draft')
            ->setParameter('draft', true)
        ->orderBy('messages.creationDate', 'DESC');

        if($max){
            $qb
            ->setMaxResults($max);
        }

        return $qb;
    }

    public function getDraftMessages(User $user, $max = null){
        $qb = $this->getDraftMessagesQB($user, $max);
        return $qb->getQuery()->getResult();
    }

    public function countDraftMessages(User $user){
        $qb = $this->getDraftMessagesQB($user);
        $qb->select('COUNT(messages)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getReceivedMessagesQB(User $user, $perPage, $page){
        $offset = ($page - 1) * $perPage;
        $qb = $this
        ->createQueryBuilder('messages')
        ->andWhere(':user MEMBER OF messages.recipients')
            ->setParameter('user', $user)
        ->andWhere('messages.draft = :draft')
            ->setParameter('draft', false)
        ->orderBy('messages.creationDate', 'DESC')
        ->setFirstResult($offset)
        ->setMaxResults($perPage);

        return $qb;
    }

    public function getReceivedMessages(User $user, $perPage = 1000, $page = 1){
        $qb = $this->getReceivedMessagesQB($user, $perPage, $page);
        return $qb->getQuery()->getResult();
    }

    public function getReceivedMessagesGroupedByConversation(User $user, $perPage = 1000, $page = 1){
        $qb = $this->getReceivedMessagesQB($user, $perPage,$page);
        //$qb
        // ->andWhere('messages.parent != :parent')
        //     ->setParameter('parent', null);
        //->andWhere($qb->expr()->isNull('messages.parent'));
        $messages =  $qb->getQuery()->getResult();

        $results = array(
            $messages
        );
        foreach($messages as $message){
            $conversation = array();
            if($message->getParent()){
                var_dump($message->getParent()->getId());
                $childItem = $message;
                while($childItem->getParent() != null){
                    $conversation[] = $childItem;
                    $childItem = $this->find($childItem->getParent());
                }
                $conversation = array_reverse($conversation);
                $results[] = $conversation;
            } else{
                $conversation[] = $message;
                $results[] = $conversation;
            }
        }
        return $results;
    }

    public function countReceivedMessages(User $user, $perPage = 1000, $page = 1){
        $qb = $this->getReceivedMessagesQB($user, $perPage, $page);
        $qb->select('COUNT(messages)');

        return $qb->getQuery()->getSingleScalarResult();
    }
}
